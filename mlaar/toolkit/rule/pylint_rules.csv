編號類別,分類編號,檢查分類,分類名,原文內容,阻擋
E,E0001,syntax-error,invalid syntax (&lt;unknown&gt;, line 460),Y
E,E1701,Async checker(非同步檢查),not-async-context-manager (E1701),Async context manager '%s' doesn't implement __aenter__ and __aexit__. Used when an async context manager is used with an object that does not implement the async context management protocol. This message can't be emitted when using Python < 3.5.,Y
E,E1700,Async checker(非同步檢查),yield-inside-async-function (E1700),Yield inside async function Used when an yield or yield from statement is found inside an async function. This message can't be emitted when using Python < 3.5.,Y
E,E0103,Basic checker(基本檢查),not-in-loop (E0103),%r not properly in loop Used when break or continue keywords are used outside a loop.,Y
E,E0102,Basic checker(基本檢查),function-redefined (E0102),%s already defined line %s Used when a function / class / method is redefined.,Y
E,E0116,Basic checker(基本檢查),continue-in-finally (E0116),"'continue' not supported inside 'finally' clause Emitted when the continue keyword is found inside a finally clause, which is a SyntaxError.",Y
E,E0110,Basic checker(基本檢查),abstract-class-instantiated (E0110),Abstract class %r with abstract methods instantiated Used when an abstract class with abc.ABCMeta as metaclass has abstract methods and is instantiated.,Y
E,E0114,Basic checker(基本檢查),star-needs-assignment-target (E0114),Can use starred expression only in assignment target Emitted when a star expression is not used in an assignment target.,Y
E,E0108,Basic checker(基本檢查),duplicate-argument-name (E0108),Duplicate argument name %s in function definition Duplicate argument names in function definitions are syntax errors.,Y
E,E0101,Basic checker(基本檢查),return-in-init (E0101),Explicit return in __init__ Used when the special class method __init__ has an explicit return value.,Y
E,E0112,Basic checker(基本檢查),too-many-star-expressions (E0112),More than one starred expression in assignment Emitted when there are more than one starred expressions (*x) in an assignment. This is a SyntaxError.,Y
E,E0115,Basic checker(基本檢查),nonlocal-and-global (E0115),Name %r is nonlocal and global Emitted when a name is both nonlocal and global.,Y
E,E0118,Basic checker(基本檢查),used-prior-global-declaration (E0118),"Name %r is used prior to global declaration Emitted when a name is used prior a global declaration, which results in an error since Python 3.6. This message can't be emitted when using Python < 3.6.",Y
E,E0104,Basic checker(基本檢查),return-outside-function (E0104),"Return outside function Used when a ""return"" statement is found outside a function or method.",Y
E,E0106,Basic checker(基本檢查),return-arg-in-generator (E0106),"Return with argument inside generator Used when a ""return"" statement with an argument is found outside in a generator function or method (e.g. with some ""yield"" statements). This message can't be emitted when using Python >= 3.3.",Y
E,E0113,Basic checker(基本檢查),invalid-star-assignment-target (E0113),Starred assignment target must be in a list or tuple Emitted when a star expression is used as a starred assignment target.,Y
E,E0111,Basic checker(基本檢查),bad-reversed-sequence (E0111),"The first reversed() argument is not a sequence Used when the first argument to reversed() builtin isn't a sequence (does not implement __reversed__, nor __getitem__ and __len__",Y
E,E0107,Basic checker(基本檢查),nonexistent-operator (E0107),"Use of the non-existent %s operator Used when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which doesn't exist in Python.",Y
E,E0105,Basic checker(基本檢查),yield-outside-function (E0105),"Yield outside function Used when a ""yield"" statement is found outside a function or method.",Y
E,E0100,Basic checker(基本檢查),init-is-generator (E0100),__init__ method is a generator Used when the special class method __init__ is turned into a generator by a yield in its body.,Y
E,E0119,Basic checker(基本檢查),misplaced-format-function (E0119),"format function is not called on str Emitted when format function is not called on str object. e.g doing print(""value: {}"").format(123) instead of print(""value: {}"".format(123)). This might not be what the user intended to do.",Y
E,E0117,Basic checker(基本檢查),nonlocal-without-binding (E0117),nonlocal name %s found without binding Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes,Y
W,W0150,Basic checker(基本檢查),lost-exception (W0150),%s statement in finally block may swallow exception Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.,
W,W0199,Basic checker(基本檢查),assert-on-tuple (W0199),"Assert called on a 2-tuple. Did you mean 'assert x,y'? A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.",
W,W0143,Basic checker(基本檢查),comparison-with-callable (W0143),"Comparing against a callable, did you omit the parenthesis? This message is emitted when pylint detects that a comparison with a callable was made, which might suggest that some parenthesis were omitted, resulting in potential unwanted behaviour.",
W,W0102,Basic checker(基本檢查),dangerous-default-value (W0102),Dangerous default value %s as argument Used when a mutable value as list or dictionary is detected in a default value for an argument.,
W,W0109,Basic checker(基本檢查),duplicate-key (W0109),Duplicate key %r in dictionary Used when a dictionary expression binds the same key multiple times.,
W,W0120,Basic checker(基本檢查),useless-else-on-loop (W0120),"Else clause on loop without a break statement Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.",
W,W0106,Basic checker(基本檢查),expression-not-assigned (W0106),"Expression ""%s"" is assigned to nothing Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.",
W,W0124,Basic checker(基本檢查),confusing-with-statement (W0124),"Following ""as"" with another context manager looks like a tuple. Emitted when a with statement component returns multiple values and uses name binding with as only for a part of those values, as in with ctx() as a, b. This can be misleading, since it's not clear if the context manager returns a tuple or if the node without a name binding is another context manager.",
W,W0108,Basic checker(基本檢查),unnecessary-lambda (W0108),Lambda may not be necessary Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.,
W,W0111,Basic checker(基本檢查),assign-to-new-keyword (W0111),Name %s will become a keyword in Python %s Used when assignment will become invalid in future Python release due to introducing new keyword.,
W,W0104,Basic checker(基本檢查),pointless-statement (W0104),Statement seems to have no effect Used when a statement doesn't have (or at least seems to) any effect.,
W,W0105,Basic checker(基本檢查),pointless-string-statement (W0105)," String statement has no effect Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments.",
W,W0107,Basic checker(基本檢查),unnecessary-pass (W0107),"Unnecessary pass statement Used when a ""pass"" statement that can be avoided is encountered.",
W,W0101,Basic checker(基本檢查),unreachable (W0101),"Unreachable code Used when there is some code behind a ""return"" or ""raise"" statement, which will never be accessed.",
W,W0123,Basic checker(基本檢查),eval-used (W0123),"Use of eval Used when you use the ""eval"" function, to discourage its usage. Consider using ast.literal_eval for safely evaluating strings containing Python expressions from untrusted sources.",
W,W0122,Basic checker(基本檢查),exec-used (W0122),"Use of exec Used when you use the ""exec"" statement (function for Python 3), to discourage its usage. That doesn't mean you cannot use it !",
W,W0125,Basic checker(基本檢查),using-constant-test (W0125),Using a conditional statement with a constant value Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.,
R,R0123,Basic checker(基本檢查),literal-comparison (R0123),"Comparison to literal Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.",N
R,R0124,Basic checker(基本檢查),comparison-with-itself (R0124),Redundant comparison - %s Used when something is compared against itself.,Y
C,C0103,Basic checker(基本檢查),invalid-name (C0103),"%s name ""%s"" doesn't conform to %s Used when the name doesn't conform to naming rules associated to its type (constant, variable, class...).",Y
C,C0102,Basic checker(基本檢查),blacklisted-name (C0102),"Black listed name ""%s"" Used when the name is listed in the black list (unauthorized names).",Y
C,C0122,Basic checker(基本檢查),misplaced-comparison-constant (C0122),Comparison should be %s Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.,Y
C,C0121,Basic checker(基本檢查),singleton-comparison (C0121),"Comparison to %s should be %s Used when an expression is compared to singleton values like True, False or None.",Y
C,C0113,Basic checker(基本檢查),unneeded-not (C0113),"Consider changing ""%s"" to ""%s"" Used when a boolean expression contains an unneeded negation.",N
C,C0112,Basic checker(基本檢查),empty-docstring (C0112),"Empty %s docstring Used when a module, function, class or method has an empty docstring (it would be too easy ;).",Y
C,C0111,Basic checker(基本檢查),missing-docstring (C0111),"Missing %s docstring Used when a module, function, class or method has no docstring.Some special methods like __init__ doesn't necessary require a docstring.",Y
C,C0123,Basic checker(基本檢查),unidiomatic-typecheck (C0123),"Using type() instead of isinstance() for a typecheck. The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.",N
E,E0203,Classes checker,access-member-before-definition (E0203),Access to member %r before its definition line %s Used when an instance member is accessed before it's actually assigned.,Y
E,E0202,Classes checker,method-hidden (E0202),An attribute defined in %s line %s hides this method Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.,Y
E,E0237,Classes checker,assigning-non-slot (E0237),Assigning to attribute %r not defined in class slots Used when assigning to an attribute not defined in the class slots.,Y
E,E0241),Classes checker,"duplicate-bases (E0241)
",  Duplicate bases for class %r Used when a class has duplicate bases.,Y
E,E0240,Classes checker,inconsistent-mro (E0240),Inconsistent method resolution order for class %r Used when a class has an inconsistent method resolution order.,Y
E,E0239,Classes checker,inherit-non-class (E0239),"Inheriting %r, which is not a class. Used when a class inherits from something which is not a class.",Y
E,E0238,Classes checker,invalid-slots (E0238),"Invalid __slots__ object Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.",Y
E,E0236,Classes checker,invalid-slots-object (E0236),"Invalid object %r in __slots__, must contain only non empty strings Used when an invalid (non-string) object occurs in __slots__.",Y
E,E0211,Classes checker,no-method-argument (E0211),Method has no argument Used when a method which should have the bound instance as first argument has no argument defined.,Y
E,E0213,Classes checker,no-self-argument (E0213),"Method should have ""self"" as first argument Used when a method has an attribute different the ""self"" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!",Y
E,E0302,Classes checker,unexpected-special-method-signature (E0302),"The special method %r expects %s param(s), %d %s given Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.",Y
E,E0301,Classes checker,non-iterator-returned (E0301),__iter__ returns non-iterator Used when an __iter__ method returns something which is not an iterable (i.e. has no __next__ method),Y
E,E0303,Classes checker,invalid-length-returned (E0303),__len__ does not return non-negative integer Used when a __len__ method returns something which is not a non-negative integer,Y
W,W0212,Classes checker,protected-access (W0212),Access to a protected member %s of a client class Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.,
W,W0201,Classes checker,attribute-defined-outside-init (W0201),Attribute %r defined outside __init__ Used when an instance attribute is defined outside the __init__ method.,
W,W0232,Classes checker,no-init (W0232),"Class has no __init__ method Used when a class has no __init__ method, neither its parent classes.",
W,W0223,Classes checker,abstract-method (W0223),Method %r is abstract in class %r but is not overridden Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.,
W,W0221,Classes checker,arguments-differ (W0221),Parameters differ from %s %r method Used when a method has a different number of arguments than in the implemented interface or in an overridden method.,
W,W0222,Classes checker,signature-differs (W0222),Signature differs from %s %r method Used when a method signature is different than in the implemented interface or in an overridden method.,
W,W0211,Classes checker,bad-staticmethod-argument (W0211),"Static method with %r as first argument Used when a static method has ""self"" or a value specified in valid- classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.",
W,W0235,Classes checker,useless-super-delegation (W0235),"Useless super delegation in method %r Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.",
W,W0233,Classes checker,non-parent-init-called (W0233),__init__ method from a non direct base class %r is called Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.,
W,W0231,Classes checker,super-init-not-called (W0231),__init__ method from base class %r is not called Used when an ancestor class method has an __init__ method which is not called by a derived class.,
R,R0205,Classes checker,useless-object-inheritance (R0205),"Class %r inherits from object, can be safely removed from bases in python3 Used when a class inherit from object, which under python3 is implicit, hence can be safely removed from bases.",N
R,R0202,Classes checker,no-classmethod-decorator (R0202),Consider using a decorator instead of calling classmethod Used when a class method is defined without using the decorator syntax.,N
R,R0203,Classes checker,no-staticmethod-decorator (R0203), Consider using a decorator instead of calling staticmethod Used when a static method is defined without using the decorator syntax.,N
R,R0201,Classes checker,no-self-use (R0201),"Method could be a function Used when a method doesn't use its bound instance, and so could be written as a function.",N
C,C0205,Classes checker,single-string-used-for-slots (C0205),"Class __slots__ should be a non-string iterable Used when a class __slots__ is a simple string, rather than an iterable.",N
C,C0202,Classes checker,bad-classmethod-argument (C0202),"Class method %s should have %s as first argument Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to ""cls""), recommended to easily differentiate them from regular instance methods.",N
C,C0204,Classes checker,bad-mcs-classmethod-argument (C0204),"Metaclass class method %s should have %s as first argument Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to ""mcs""), recommended to easily differentiate them from regular instance methods.",N
C,C0203,Classes checker,bad-mcs-method-argument (C0203),"Metaclass method %s should have %s as first argument Used when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to ""cls""), recommended to easily differentiate them from regular instance methods.",N
F,F0202,Classes checker,method-check-failed (F0202),Unable to check methods signature (%s / %s) Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.,
R,R0903,Design checker,too-few-public-methods (R0903),"Too few public methods (%s/%s) Used when class has too few public methods, so be sure it's really worth it.",N
R,R0901,Design checker,too-many-ancestors (R0901),"Too many ancestors (%s/%s) Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.",N
R,R0913,Design checker,too-many-arguments (R0913),Too many arguments (%s/%s) Used when a function or method takes too many arguments.,N
R,R0916,Design checker,too-many-boolean-expressions (R0916),Too many boolean expressions in if statement (%s/%s) Used when an if statement contains too many boolean expressions.,Y
R,R0912,Design checker,too-many-branches (R0912),"Too many branches (%s/%s) Used when a function or method has too many branches, making it hard to follow.",N
R,R0902,Design checker,too-many-instance-attributes (R0902),"Too many instance attributes (%s/%s) Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.",N
R,R0914,Design checker,too-many-locals (R0914),Too many local variables (%s/%s) Used when a function or method has too many local variables.,N
R,R0904,Design checker,too-many-public-methods (R0904),"Too many public methods (%s/%s) Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.",N
R,R0911,Design checker,too-many-return-statements (R0911),"Too many return statements (%s/%s) Used when a function or method has too many return statement, making it hard to follow.",N
R,R0915,Design checker,too-many-statements (R0915),Too many statements (%s/%s) Used when a function or method has too many statements. You should then split it in smaller functions / methods.,N
E,E0701,Exceptions checker,bad-except-order (E0701),"Bad except clauses order (%s) Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be caught by the most specific handler.",Y
E,E0712,Exceptions checker,catching-non-exception (E0712),Catching an exception which doesn't inherit from Exception: %s Used when a class which doesn't inherit from Exception is used as an exception in an except clause.,Y
E,E0703,Exceptions checker,bad-exception-context (E0703),"Exception context set to something which is not an exception, nor None Used when using the syntax ""raise ... from ..."", where the exception context is not an exception, nor None.",Y
E,E0711,Exceptions checker,notimplemented-raised (E0711),NotImplemented raised - should raise NotImplementedError Used when NotImplemented is raised instead of NotImplementedError,Y
E,E0702,Exceptions checker,raising-bad-type (E0702),"Raising %s while only classes or instances are allowed Used when something which is neither a class, an instance or a string is raised (i.e. a TypeError will be raised).",Y
E,E0710,Exceptions checker,raising-non-exception (E0710),Raising a new style class which doesn't inherit from BaseException Used when a new style class which doesn't inherit from BaseException is raised.,Y
E,E0704,Exceptions checker,misplaced-bare-raise (E0704),"The raise statement is not inside an except clause Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.",Y
W,W0705,Exceptions checker,duplicate-except (W0705),Catching previously caught exception type %s Used when an except catches a type that was already caught by a previous handler.,Y
W,W0703,Exceptions checker,broad-except (W0703),"Catching too general exception %s Used when an except catches a too general exception, possibly burying unrelated errors.",
W,W0715,Exceptions checker,raising-format-tuple (W0715),"Exception arguments suggest string formatting might be intended Used when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting",
W,W0711,Exceptions checker,binary-op-exception (W0711),"Exception to catch is the result of a binary ""%s"" operation Used when the exception to catch is of the form ""except A or B:"". If intending to catch multiple, rewrite as ""except (A, B):""",
W,W0702,Exceptions checker,bare-except (W0702),No exception type(s) specified Used when an except clause doesn't specify exceptions type to catch.,Y
W,W0706,Exceptions checker,try-except-raise (W0706),The except handler raises immediately Used when an except handler uses raise as its first or only operator. This is useless because it raises back the exception immediately. Remove the raise operator or the entire try-except-raise block!,
W,W0311,Format checker,bad-indentation (W0311),"Bad indentation. Found %s %s, expected %s Used when an unexpected number of indentation's tabulations or spaces has been found.",Y
W,W0312,Format checker,mixed-indentation (W0312),Found indentation with %ss instead of %ss Used when there are some mixed tabs and spaces in a module.,Y
W,W0301,Format checker,unnecessary-semicolon (W0301),"Unnecessary semicolon Used when a statement is ended by a semi-colon ("";""), which isn't necessary (that's python, not C ;).",Y
C,C0326,Format checker,bad-whitespace (C0326),"%s space %s %s %s Used when a wrong number of spaces is used around an operator, bracket or block opener.",Y
C,C0304,Format checker,missing-final-newline (C0304),Final newline missing Used when the last line in a file is missing a newline.,Y
C,C0301,Format checker,line-too-long (C0301),Line too long (%s/%s) Used when a line is longer than a given number of characters.,Y
C,C0327,Format checker,mixed-line-endings (C0327),Mixed line endings LF and CRLF Used when there are mixed (LF and CRLF) newline signs in a file.,Y
C,C0321,Format checker,multiple-statements (C0321),More than one statement on a single line Used when more than on statement are found on the same line.,Y
C,C0302,Format checker,too-many-lines (C0302),"Too many lines in module (%s/%s) Used when a module has too many lines, reducing its readability.",Y
C,C0305,Format checker,trailing-newlines (C0305),Trailing newlines Used when there are trailing blank lines in a file.,Y
C,C0303,Format checker,trailing-whitespace (C0303),Trailing whitespace Used when there is whitespace between the end of a line and the newline.,Y
C,C0328,Format checker,unexpected-line-ending-format (C0328),Unexpected line ending format. There is '%s' while it should be '%s'. Used when there is different newline than expected.,N
C,C0325,Format checker,superfluous-parens (C0325),"Unnecessary parens after %r keyword Used when a single item in parentheses follows an if, for, or other keyword.",N
C,C0330,Format checker,bad-continuation (C0330),Wrong %s indentation%s%s. TODO,Y
E,E0402,Imports checker,relative-beyond-top-level (E0402),Attempted relative import beyond top-level package Used when a relative import tries to access too many levels in the current package.,Y
E,E0401,Imports checker,import-error (E0401),Unable to import %s Used when pylint has been unable to import a module.,Y
W,W0406,Imports checker,import-self (W0406),Module import itself Used when a module is importing itself.,Y
W,W0404,Imports checker,reimported (W0404),Reimport %r (imported line %s) Used when a module is reimported multiple times.,Y
W,W0403,Imports checker,relative-import (W0403),"Relative import %r, should be %r Used when an import relative to the package directory is detected. This message can't be emitted when using Python >= 3.0.",
W,W0402,Imports checker,deprecated-module (W0402),Uses of a deprecated module %r Used a module marked as deprecated is imported.,
W,W0401,Imports checker,wildcard-import (W0401),Wildcard import %s Used when from module import * is detected.,
W,W0410,Imports checker,misplaced-future (W0410),__future__ import is not the first non docstring statement Python 2.5 and greater require __future__ import to be the first non docstring statement in the module.,
R,R0401,Imports checker,cyclic-import (R0401),Cyclic import (%s) Used when a cyclic import between two or more modules is detected.,Y
C,C0411,Imports checker,wrong-import-order (C0411),"%s should be placed before %s Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports)",N
C,C0413,Imports checker,wrong-import-position (C0413),"Import ""%s"" should be placed at the top of the module Used when code and imports are mixed",Y
C,C0414,Imports checker,useless-import-alias (C0414),Import alias does not rename original package Used when an import alias is same as original package.e.g using import numpy as numpy instead of import numpy as np,Y
C,C0412,Imports checker,ungrouped-imports (C0412),Imports from package %s are not grouped Used when imports are not grouped by packages,Y
C,C0410,Imports checker,multiple-imports (C0410),Multiple imports on one line (%s) Used when import statement importing multiple modules is detected.,Y
E,E1133,Iterable Check,not-an-iterable (E1133),Non-iterable value %s is used in an iterating context Used when a non-iterable value is used in place where iterable is expected,Y
E,E1134,Iterable Check,not-a-mapping (E1134),Non-mapping value %s is used in a mapping context Used when a non-mapping value is used in place where mapping is expected,Y
C,C1801,Len checker,len-as-condition (C1801),"Do not use `len(SEQUENCE)` to determine if a sequence is empty Used when Pylint detects that len(sequence) is being used inside a condition to determine if a sequence is empty. Instead of comparing the length to 0, rely on the fact that empty sequences are false.",Y
E,E1201,Logging checker,logging-format-truncated (E1201),Format style used to check logging format string.Default: %,Y
E,E1206,Logging checker,logging-too-few-args (E1206),Logging format string ends in middle of conversion specifier Used when a logging statement format string terminates before the end of a conversion specifier.,Y
E,E1205,Logging checker,logging-too-many-args (E1205),Not enough arguments for logging format string Used when a logging format string is given too few arguments.,Y
E,E1200,Logging checker,logging-unsupported-format (E1200),Too many arguments for logging format string Used when a logging format string is given too many arguments.,Y
W,W1201,Logging checker,logging-not-lazy (W1201),Unsupported logging format character %r (%#02x) at index %d Used when an unsupported format character is used in a logging statement format string.,
W,W1202,Logging checker,logging-format-interpolation (W1202),"Specify string format arguments as logging function parameters Used when a logging statement has a call form of ""logging.<logging method>(format_string % (format_args...))"". Such calls should leave string interpolation to the logging method itself and be written ""logging.<logging method>(format_string, format_args...)"" so that the program may avoid incurring the cost of the interpolation in those cases in which no message will be logged. For more, see http://www.python.org/dev/peps/pep-0282/.",
W,W1203,Logging checker,logging-fstring-interpolation (W1203),"Use % formatting in logging functions and pass the % parameters as arguments Used when a logging statement has a call form of ""logging.<logging method>(format_string.format(format_args...))"". Such calls should use % formatting instead, but leave interpolation to the logging function by passing the parameters as arguments.",
W,W0512,Logging checker,invalid-encoded-data (W0512),"Cannot decode using encoding ""%s"", unexpected byte at position %d Used when a source line cannot be decoded using the specified source file encoding. This message can't be emitted when using Python >= 3.0.",
W,W0511,Miscellaneous checker,fixme (W0511),Used when a warning note as FIXME or XXX is detected.,
W,W0512,Miscellaneous checker,invalid-encoded-data (W0512),"Cannot decode using encoding ""%s"", unexpected byte at position %d Used when a source line cannot be decoded using the specified source file encoding. This message can't be emitted when using Python >= 3.0.",
I,I0023,Miscellaneous checker,use-symbolic-message-instead (I0023),Used when a message is enabled or disabled by id.,
E,E1003,Newstyle checker,bad-super-call (E1003),Bad first argument %r given to super() Used when another argument than the current class is given as first argument of the super builtin.,Y
E,E1004,Newstyle checker,missing-super-argument (E1004),Missing argument to super() Used when the super builtin didn't receive an argument. This message can't be emitted when using Python >= 3.0.,Y
E,E1603,Python3 checker,unpacking-in-except (E1603),Implicit unpacking of exceptions is not supported in Python 3 Python3 will not allow implicit unpacking of exceptions in except clauses. See http://www.python.org/dev/peps/pep-3110/,Y
E,E1609,Python3 checker,import-star-module-level (E1609),Import * only allowed at module level Used when the import star syntax is used somewhere else than the module level. This message can't be emitted when using Python >= 3.0.,Y
E,E1610,Python3 checker,non-ascii-bytes-literal (E1610),Non-ascii bytes literals not supported in 3.x Used when non-ascii bytes literals are found in a program. They are no longer supported in Python 3. This message can't be emitted when using Python >= 3.0.,Y
E,E1602,Python3 checker,parameter-unpacking (E1602),Parameter unpacking specified Used when parameter unpacking is specified for a function(Python 3 doesn't allow it),Y
E,E1606,Python3 checker,long-suffix (E1606),"Use of long suffix Used when ""l"" or ""L"" is used to mark a long integer. This will not work in Python 3, since int and long types have merged. This message can't be emitted when using Python >= 3.0.",Y
E,E1608,Python3 checker,old-octal-literal (E1608),"Use of old octal literal Used when encountering the old octal syntax, removed in Python 3. To use the new syntax, prepend 0o on the number. This message can't be emitted when using Python >= 3.0.",Y
E,E1607,Python3 checker,old-ne-operator (E1607),"Use of the <> operator Used when the deprecated ""<>"" operator is used instead of ""!="". This is removed in Python 3. This message can't be emitted when using Python >= 3.0.",Y
E,E1605,Python3 checker,backtick (E1605),"Use of the `` operator Used when the deprecated ""``"" (backtick) operator is used instead of the str() function.",Y
E,E1604,Python3 checker,old-raise-syntax (E1604),"Use raise ErrorClass(args) instead of raise ErrorClass, args. Used when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'.",Y
E,E1601,Python3 checker,print-statement (E1601),print statement used Used when a print statement is used (print is a function in Python 3),Y
W,W1652,Python3 checker,deprecated-types-field (W1652),Accessing a deprecated fields on the types module Used when accessing a field on types that has been removed in Python 3.,
W,W1651,Python3 checker,deprecated-itertools-function (W1651),Accessing a deprecated function on the itertools module Used when accessing a function on itertools that has been removed in Python 3.,
W,W1649,Python3 checker,deprecated-string-function (W1649),Accessing a deprecated function on the string module Used when accessing a string function that has been deprecated in Python 3.,
W,W1657,Python3 checker,deprecated-operator-function (W1657),Accessing a removed attribute on the operator module Used when accessing a field on operator module that has been removed in Python 3.,
W,W1660,Python3 checker,deprecated-sys-function (W1660),Accessing a removed attribute on the sys module Used when accessing a field on sys module that has been removed in Python 3.,
W,W1658,Python3 checker,deprecated-urllib-function (W1658),Accessing a removed attribute on the urllib module Used when accessing a field on urllib module that has been removed or moved in Python 3.,
W,W1659,Python3 checker,xreadlines-attribute (W1659),"Accessing a removed xreadlines attribute Used when accessing the xreadlines() function on a file stream, removed in Python 3.",
W,W1623,Python3 checker,metaclass-assignment (W1623),Assigning to a class's __metaclass__ attribute Used when a metaclass is specified by assigning to __metaclass__ (Python 3 specifies the metaclass as a class statement argument),
W,W1622,Python3 checker,next-method-called (W1622),Called a next() method on an object Used when an object's next() method is called (Python 3 uses the next() built- in function),
W,W1620,Python3 checker,dict-iter-method (W1620),"Calling a dict.iter*() method Used for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks these methods)",
W,W1621,Python3 checker,dict-view-method (W1621),"Calling a dict.view*() method Used for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks these methods)",
W,W1645,Python3 checker,exception-message-attribute (W1645),Exception.message removed in Python 3 Used when the message attribute is accessed on an Exception. Use str(exception) instead.,
W,W1641,Python3 checker,eq-without-hash (W1641),"Implementing __eq__ without also implementing __hash__ Used when a class implements __eq__ but not __hash__. In Python 2, objects get object.__hash__ as the default implementation, in Python 3 objects get None as their default __hash__ implementation if they also implement __eq__.",
W,W1624,Python3 checker,indexing-exception (W1624),Indexing exceptions will not work on Python 3 Indexing exceptions will not work on Python 3. Use exception.args[index] instead.,
W,W1648,Python3 checker,bad-python3-import (W1648),Module moved in Python 3 Used when importing a module that no longer exists in Python 3.,
W,W1625,Python3 checker,raising-string (W1625),Raising a string exception Used when a string exception is raised. This will not work on Python 3.,
W,W1611,Python3 checker,standarderror-builtin (W1611),StandardError built-in referenced Used when the StandardError built-in function is referenced (missing from Python 3),
W,W1662,Python3 checker,comprehension-escape (W1662),"Using a variable that was bound inside a comprehension Emitted when using a variable, that was bound in a comprehension handler, outside of the comprehension itself. On Python 3 these variables will be deleted outside of the comprehension.",N
W,W1661,Python3 checker,exception-escape (W1661),"Using an exception object that was bound by an except handler Emitted when using an exception, that was bound in an except handler, outside of the except handler. On Python 3 these exceptions will be deleted once they get out of the except handler.",
W,W1650,Python3 checker,deprecated-str-translate-call (W1650),Using str.translate with deprecated deletechars parameters Used when using the deprecated deletechars parameters from str.translate. Use re.sub to remove the desired characters,
W,W1640,Python3 checker,using-cmp-argument (W1640),"Using the cmp argument for list.sort / sorted Using the cmp argument for list.sort or the sorted builtin should be avoided, since it was removed in Python 3. Using either key or functools.cmp_to_key should be preferred.",
W,W1630,Python3 checker,cmp-method (W1630),__cmp__ method defined Used when a __cmp__ method is defined (method is not used by Python 3),
W,W1614,Python3 checker,coerce-method (W1614),__coerce__ method defined Used when a __coerce__ method is defined (method is not used by Python 3),
W,W1615,Python3 checker,delslice-method (W1615),__delslice__ method defined Used when a __delslice__ method is defined (method is not used by Python 3),
W,W1642,Python3 checker,div-method (W1642),__div__ method defined Used when a __div__ method is defined. Using __truediv__ and setting__div__ = __truediv__ should be preferred.(method is not used by Python 3),
W,W1616,Python3 checker,getslice-method (W1616),__getslice__ method defined Used when a __getslice__ method is defined (method is not used by Python 3),
W,W1628,Python3 checker,hex-method (W1628),__hex__ method defined Used when a __hex__ method is defined (method is not used by Python 3),
W,W1643,Python3 checker,idiv-method (W1643),__idiv__ method defined Used when an __idiv__ method is defined. Using __itruediv__ and setting__idiv__ = __itruediv__ should be preferred.(method is not used by Python 3),
W,W1629,Python3 checker,nonzero-method (W1629),__nonzero__ method defined Used when a __nonzero__ method is defined (method is not used by Python 3),
W,W1627,Python3 checker,oct-method (W1627),__oct__ method defined Used when an __oct__ method is defined (method is not used by Python 3),
W,W1644,Python3 checker,rdiv-method (W1644),__rdiv__ method defined Used when a __rdiv__ method is defined. Using __rtruediv__ and setting__rdiv__ = __rtruediv__ should be preferred.(method is not used by Python 3),
W,W1617,Python3 checker,setslice-method (W1617),__setslice__ method defined Used when a __setslice__ method is defined (method is not used by Python 3),
W,W1601,Python3 checker,apply-builtin (W1601),apply built-in referenced Used when the apply built-in function is referenced (missing from Python 3),
W,W1602,Python3 checker,basestring-builtin (W1602),basestring built-in referenced Used when the basestring built-in function is referenced (missing from Python 3),
W,W1603,Python3 checker,buffer-builtin (W1603),buffer built-in referenced Used when the buffer built-in function is referenced (missing from Python 3),
W,W1604,Python3 checker,cmp-builtin (W1604),cmp built-in referenced Used when the cmp built-in function is referenced (missing from Python 3),
W,W1605,Python3 checker,coerce-builtin (W1605),coerce built-in referenced Used when the coerce built-in function is referenced (missing from Python 3),
W,W1654,Python3 checker,dict-items-not-iterating (W1654),dict.items referenced when not iterating Used when dict.items is referenced in a non-iterating context (returns an iterator in Python 3),
W,W1655,Python3 checker,dict-keys-not-iterating (W1655),dict.keys referenced when not iterating Used when dict.keys is referenced in a non-iterating context (returns an iterator in Python 3),
W,W1656,Python3 checker,dict-values-not-iterating (W1656),dict.values referenced when not iterating Used when dict.values is referenced in a non-iterating context (returns an iterator in Python 3),
W,W1619,Python3 checker,old-division (W1619),division w/o __future__ statement Used for non-floor division w/o a float literal or from __future__import division (Python 3 returns a float for int division unconditionally),
W,W1606,Python3 checker,execfile-builtin (W1606),execfile built-in referenced Used when the execfile built-in function is referenced (missing from Python 3),
W,W1607,Python3 checker,file-builtin (W1607),file built-in referenced Used when the file built-in function is referenced (missing from Python 3),
W,W1639,Python3 checker,filter-builtin-not-iterating (W1639),filter built-in referenced when not iterating Used when the filter built-in is referenced in a non-iterating context (returns an iterator in Python 3),
W,W1618,Python3 checker,no-absolute-import (W1618),import missing `from __future__ import absolute_import` Used when an import is not accompanied by from __future__ import absolute_import (default behaviour in Python 3),
W,W1632,Python3 checker,input-builtin (W1632),input built-in referenced Used when the input built-in is referenced (backwards-incompatible semantics in Python 3),
W,W1634,Python3 checker,intern-builtin (W1634),intern built-in referenced Used when the intern built-in is referenced (Moved to sys.intern in Python 3),
W,W1608,Python3 checker,long-builtin (W1608),long built-in referenced Used when the long built-in function is referenced (missing from Python 3),
W,W1636,Python3 checker,map-builtin-not-iterating (W1636),map built-in referenced when not iterating Used when the map built-in is referenced in a non-iterating context (returns an iterator in Python 3),
W,W1653,Python3 checker,next-method-defined (W1653),next method defined Used when a next method is defined that would be an iterator in Python 2 but is treated as a normal function in Python 3.,
W,W1646,Python3 checker,invalid-str-codec (W1646),non-text encoding used in str.decode Used when using str.encode or str.decode with a non-text encoding. Use codecs module to handle arbitrary codecs.,
W,W1638,Python3 checker,range-builtin-not-iterating (W1638),range built-in referenced when not iterating Used when the range built-in is referenced in a non-iterating context (returns an iterator in Python 3),
W,W1609,Python3 checker,raw_input-builtin (W1609),raw_input built-in referenced Used when the raw_input built-in function is referenced (missing from Python 3),
W,W1610,Python3 checker,reduce-builtin (W1610),reduce built-in referenced Used when the reduce built-in function is referenced (missing from Python 3),
W,W1626,Python3 checker,reload-builtin (W1626),reload built-in referenced Used when the reload built-in function is referenced (missing from Python 3). You can use instead imp.reload or importlib.reload.,
W,W1633,Python3 checker,round-builtin (W1633),round built-in referenced Used when the round built-in is referenced (backwards-incompatible semantics in Python 3),
W,W1647,Python3 checker,sys-max-int (W1647),sys.maxint removed in Python 3 Used when accessing sys.maxint. Use sys.maxsize instead.,
W,W1635,Python3 checker,unichr-builtin (W1635),unichr built-in referenced Used when the unichr built-in is referenced (Use chr in Python 3),
W,W1612,Python3 checker,unicode-builtin (W1612),unicode built-in referenced Used when the unicode built-in function is referenced (missing from Python 3),
W,W1613,Python3 checker,xrange-builtin (W1613),xrange built-in referenced Used when the xrange built-in function is referenced (missing from Python 3),
W,W1637,Python3 checker,zip-builtin-not-iterating (W1637),zip built-in referenced when not iterating Used when the zip built-in is referenced in a non-iterating context (returns an iterator in Python 3),
R,R1709,Refactoring checker,simplify-boolean-expression (R1709),Boolean expression may be simplified to %s Emitted when redundant pre-python 2.5 ternary syntax is used.,Y
R,R1714,Refactoring checker,consider-using-in (R1714),"Consider merging these comparisons with ""in"" to %r To check if a variable is equal to one of many values,combine the values into a tuple and check if the variable is contained ""in"" it instead of checking for equality against each of the values.This is faster and less verbose.",N
R,R1701,Refactoring checker,consider-merging-isinstance (R1701),"Consider merging these isinstance calls to isinstance(%s, (%s)) Used when multiple consecutive isinstance calls can be merged into one.",N
R,R1717,Refactoring checker,consider-using-dict-comprehension (R1717),"Consider using a dictionary comprehension Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a dict comprehension.Also it is faster since you don't need to create another transient list",N
R,R1718,Refactoring checker,consider-using-set-comprehension (R1718),"Consider using a set comprehension Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a set comprehension.Also it is faster since you don't need to create another transient list",N
R,R1715,Refactoring checker,consider-using-get (R1715),"Consider using dict.get for getting values from a dict if a key is present or a default if not Using the builtin dict.get for getting a value from a dictionary if a key is present or a default if not, is simpler and considered more idiomatic, although sometimes a bit slower",N
R,R1713,Refactoring checker,consider-using-join (R1713),"Consider using str.join(sequence) for concatenating strings from an iterable Using str.join(sequence) is faster, uses less memory and increases readability compared to for-loop iteration.",N
R,R1706,Refactoring checker,consider-using-ternary (R1706),Consider using ternary (%s) Used when one of known pre-python 2.5 ternary syntax is used.,N
R,R1712,Refactoring checker,consider-swap-variables (R1712),"Consider using tuple unpacking for swapping variables You do not have to use a temporary variable in order to swap variables. Using ""tuple unpacking"" to directly swap variables makes the intention more clear.",N
R,R1707,Refactoring checker,trailing-comma-tuple (R1707),"Disallow trailing comma tuple In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple.",Y
R,R1708,Refactoring checker,stop-iteration-return (R1708),"Do not raise StopIteration in generator, use return statement instead According to PEP479, the raise of StopIteration to end the loop of a generator may lead to hard to find bugs. This PEP specify that raise StopIteration has to be replaced by a simple return statement",N
R,R1710,Refactoring checker,inconsistent-return-statements (R1710),"Either all return statements in a function should return an expression, or none of them should. According to PEP8, if any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable)",N
R,R1704,Refactoring checker,redefined-argument-from-local (R1704),"Redefining argument with the local name %r Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.",Y
R,R1716,Refactoring checker,chained-comparison (R1716),"Simplify chained comparison between the operands This message is emitted when pylint encounters boolean operation like""a < b and b < c"", suggesting instead to refactor it to ""a < b < c""",N
R,R1719,Refactoring checker,simplifiable-if-expression (R1719),The if expression can be replaced with %s Used when an if expression can be replaced with 'bool(test)'.,Y
R,R1703,Refactoring checker,simplifiable-if-statement (R1703),The if statement can be replaced with %s Used when an if statement can be replaced with 'bool(test)'.,Y
R,R1702,Refactoring checker,too-many-nested-blocks (R1702),Too many nested blocks (%s/%s) Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.,Y
R,R1705,Refactoring checker,no-else-return (R1705),"Unnecessary ""%s"" after ""return"" Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.",N
R,R1711,Refactoring checker,useless-return (R1711),"Useless return at end of function or method Emitted when a single ""return"" or ""return None"" statement is found at the end of function or method definition. This statement can safely be removed because Python will implicitly return None",Y
C,C0201,Refactoring checker,consider-iterating-dictionary (C0201),"Consider iterating the dictionary directly instead of calling .keys() Emitted when the keys of a dictionary are iterated through the .keys() method. It is enough to just iterate through the dictionary itself, as in ""for key in dictionary"".",Y
C,C0200,Refactoring checker,consider-using-enumerate (C0200),Consider using enumerate instead of iterating with range and len Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.,N
R,R0801,Similarities checker,duplicate-code (R0801),Similar lines in %s files Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.,N
C,C0403,Spelling checker,invalid-characters-in-docstring (C0403),Invalid characters %r in a docstring Used when a word in docstring cannot be checked by enchant.,N
C,C0401,Spelling checker,wrong-spelling-in-comment (C0401),Wrong spelling of a word '%s' in a comment: Used when a word in comment is not spelled correctly.,N
C,C0402,Spelling checker,wrong-spelling-in-docstring (C0402),Wrong spelling of a word '%s' in a docstring: Used when a word in docstring is not spelled correctly.,N
E,E1507,Stdlib checker,invalid-envvar-value (E1507),%s does not support %s type argument Env manipulation functions support only string type arguments. See https://docs.python.org/3/library/os.html#os.getenv.,Y
W,W1501,Stdlib checker,bad-open-mode (W1501),"""%s"" is not a valid mode for open. Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See http://docs.python.org/2/library/functions.html#open",
W,W1508,Stdlib checker,invalid-envvar-default (W1508),%s default type is %s. Expected str or None. Env manipulation functions return None or str values. Supplying anything different as a default may cause bugs. Seehttps://docs.python.org/3/library/os.html#os.getenv.,
W,W1503,Stdlib checker,redundant-unittest-assert (W1503),"Redundant use of %s with constant value %r The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.",
W,W1507,Stdlib checker,shallow-copy-environ (W1507),"Using copy.copy(os.environ). Use os.environ.copy() instead. os.environ is not a dict object but proxy object, so shallow copy has still effects on original object. See https://bugs.python.org/issue15373for reference.",
W,W1502,Stdlib checker,boolean-datetime (W1502),Using datetime.time in a boolean context. Using datetime.time in a boolean context can hide subtle bugs when the time they represent matches midnight UTC. This behaviour was fixed in Python 3.5. See http://bugs.python.org/issue13936 for reference. This message can't be emitted when using Python >= 3.5.,
W,W1505,Stdlib checker,deprecated-method (W1505),Using deprecated method %s() The method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.,
W,W1509,Stdlib checker,subprocess-popen-preexec-fn (W1509),"Using preexec_fn keyword which may be unsafe in the presence of threads The preexec_fn parameter is not safe to use in the presence of threads in your application. The child process could deadlock before exec is called. If you must use it, keep it trivial! Minimize the number of libraries you call into.https://docs.python.org/3/library/subprocess.html#popen-constructor",
W,W1506,Stdlib checker,bad-thread-instantiation (W1506),"threading.Thread needs the target function The warning is emitted when a threading.Thread class is instantiated without the target function being passed. By default, the first parameter is the group param, not the target param.",
E,E1307,String checker,bad-string-format-type (E1307),Argument %r does not match format type %r Used when a type required by format string is not suitable for actual argument type,Y
E,E1303,String checker,format-needs-mapping (E1303),"Expected mapping for format string, not %s Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.",Y
E,E1301,String checker,truncated-format-string (E1301),Format string ends in middle of conversion specifier Used when a format string terminates before the end of a conversion specifier.,Y
E,E1304,String checker,missing-format-string-key (E1304),Missing key %r in format string dictionary Used when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.,Y
E,E1302,String checker,mixed-format-string (E1302),Mixing named and unnamed conversion specifiers in format string Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.,Y
E,E1306,String checker,too-few-format-args (E1306),Not enough arguments for format string Used when a format string that uses unnamed conversion specifiers is given too few arguments,Y
E,E1310,String checker,bad-str-strip-call (E1310),"Suspicious argument in %s.%s call The argument to a str.{l,r,}strip call contains a duplicate character,",Y
E,E1305,String checker,too-many-format-args (E1305),Too many arguments for format string Used when a format string that uses unnamed conversion specifiers is given too many arguments.,Y
E,E1300,String checker,bad-format-character (E1300),Unsupported format character %r (%#02x) at index %d Used when an unsupported format character is used in a format string.,Y
W,W1308,String checker,duplicate-string-formatting-argument (W1308),"Duplicate string formatting argument %r, consider passing as named argument Used when we detect that a string formatting is repeating an argument instead of using named string arguments",
W,W1305,String checker,format-combined-specification (W1305),Format string contains both automatic field numbering and manual field specification Used when a PEP 3101 format string contains both automatic field numbering (e.g. '{}') and manual field specification (e.g. '{0}').,
W,W1300,String checker,bad-format-string-key (W1300),"Format string dictionary key should be a string, not %s Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.",
W,W1302,String checker,bad-format-string (W1302),Invalid format string Used when a PEP 3101 format string is invalid.,
W,W1306,String checker,missing-format-attribute (W1306),"Missing format attribute %r in format specifier %r Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn't have that attribute.",
W,W1303,String checker,missing-format-argument-key (W1303),Missing keyword argument %r for format string Used when a PEP 3101 format string that uses named fields doesn't receive one or more required keywords.,
W,W1304,String checker,unused-format-string-argument (W1304),Unused format argument %r Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string.,
W,W1301,String checker,unused-format-string-key (W1301),Unused key %r in format string dictionary Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.,
W,W1307,String checker,invalid-format-index (W1307),"Using invalid lookup key %r in format specifier %r Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn't contain or doesn't have that key as an attribute.",
W,W1402,String Constant checker,anomalous-unicode-escape-in-string (W1402),Anomalous Unicode escape in byte string: '%s'. String constant might be missing an r or u prefix.Used when an escape like u is encountered in a byte string where it has no effect.,
W,W1401,String Constant checker,anomalous-backslash-in-string (W1401),Anomalous backslash in string: '%s'. String constant might be missing an r prefix. Used when a backslash is in a literal string but not as an escape.,
W,W1403,String Constant checker,implicit-str-concat-in-sequence (W1403),Implicit string concatenation found in %s String literals are implicitly concatenated in a literal iterable definition : maybe a comma is missing ?,
E,E1137,Typecheck checker,unsupported-assignment-operation (E1137),%r does not support item assignment Emitted when an object does not support item assignment (i.e. doesn't define __setitem__ method).,Y
E,E1138,Typecheck checker,unsupported-delete-operation (E1138),%r does not support item deletion Emitted when an object does not support item deletion (i.e. doesn't define __delitem__ method).,Y
E,E1130,Typecheck checker,invalid-unary-operand-type (E1130),Emitted when a unary operand is used on an object which does not support this type of operation.,Y
E,E1131,Typecheck checker,unsupported-binary-operation (E1131),Emitted when a binary arithmetic operation between two operands is not supported.,Y
E,E1101,Typecheck checker,no-member (E1101),%s %r has no %r member%s Used when a variable is accessed for an unexistent member.,Y
E,E1102,Typecheck checker,not-callable (E1102),%s is not callable Used when an object being called has been inferred to a non callable object.,Y
E,E1124,Typecheck checker,redundant-keyword-arg (E1124),"Argument %r passed by position and keyword in %s call Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.",Y
E,E1111,Typecheck checker,assignment-from-no-return (E1111),"Assigning result of a function call, where the function has no return Used when an assignment is done on a function call but the inferred function doesn't return anything.",Y
E,E1128,Typecheck checker,assignment-from-none (E1128),"Assigning result of a function call, where the function returns None Used when an assignment is done on a function call but the inferred function returns nothing but None.",Y
E,E1129,Typecheck checker,not-context-manager (E1129),Context manager '%s' doesn't implement __enter__ and __exit__. Used when an instance in a with statement doesn't implement the context manager protocol(__enter__/__exit__).,Y
E,E1140,Typecheck checker,unhashable-dict-key (E1140),Dict key is unhashable Emitted when a dict key is not hashable (i.e. doesn't define __hash__ method).,Y
E,E1132,Typecheck checker,repeated-keyword (E1132),Got multiple values for keyword argument %r in function call Emitted when a function call got multiple values for a keyword.,Y
E,E1139,Typecheck checker,invalid-metaclass (E1139),"Invalid metaclass %r used Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.",Y
E,E1125,Typecheck checker,missing-kwoa (E1125),Missing mandatory keyword argument %r in %s call Used when a function call does not pass a mandatory keyword-only argument.,Y
E,E1120,Typecheck checker,no-value-for-parameter (E1120),No value for argument %s in %s call Used when a function call passes too few arguments.,Y
E,E1126,Typecheck checker,invalid-sequence-index (E1126),"Sequence index is not an int, slice, or instance with __index__ Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an __index__ method.",Y
E,E1127,Typecheck checker,invalid-slice-index (E1127),"Slice index is not an int, None, or instance with __index__ Used when a slice index is not an integer, None, or an object with an __index__ method.",Y
E,E1121,Typecheck checker,too-many-function-args (E1121),Too many positional arguments for %s call Used when a function call passes too many positional arguments.,Y
E,E1123,Typecheck checker,unexpected-keyword-arg (E1123),Unexpected keyword argument %r in %s call Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.,Y
E,E1135,Typecheck checker,unsupported-membership-test (E1135),Value '%s' doesn't support membership test Emitted when an instance in membership test expression doesn't implement membership protocol (__contains__/__iter__/__getitem__).,Y
E,E1136,Typecheck checker,unsubscriptable-object (E1136),Value '%s' is unsubscriptable Emitted when a subscripted value doesn't support subscription (i.e. doesn't define __getitem__ method).,Y
W,W1113,Typecheck checker,keyword-arg-before-vararg (W1113),"Keyword argument before variable positional arguments list in the definition of %s function When defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.",
I,I1101,Typecheck checker,c-extension-no-member (I1101),"%s %r has no %r member%s, but source is unavailable. Consider adding this module to extension-pkg-whitelist if you want to perform analysis based on run-time introspection of living objects. Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.",
E,E0633,Variables checker,unpacking-non-sequence (E0633),Attempting to unpack a non-sequence%s Used when something which is not a sequence is used in an unpack assignment,Y
E,E0604,Variables checker,invalid-all-object (E0604),"Invalid object %r in __all__, must contain only strings Used when an invalid (non-string) object occurs in __all__.",Y
E,E0611,Variables checker,no-name-in-module (E0611),No name %r in module %r Used when a name cannot be found in a module.,Y
E,E0602,Variables checker,undefined-variable (E0602),Undefined variable %r Used when an undefined variable is accessed.,Y
E,E0603,Variables checker,undefined-all-variable (E0603),Undefined variable name %r in __all__ Used when an undefined variable name is referenced in __all__.,Y
E,E0601,Variables checker,used-before-assignment (E0601),Using variable %r before assignment Used when a local variable is accessed before its assignment.,Y
W,W0640,Variables checker,cell-var-from-loop (W0640),Cell variable %s defined in loop A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.,
W,W0601,Variables checker,global-variable-undefined (W0601),"Global variable %r undefined at the module level Used when a variable is defined through the ""global"" statement but the variable is not defined in the module scope.",
W,W0642,Variables checker,self-cls-assignment (W0642),Invalid assignment to %s in method Invalid assignment to self or cls in instance or class method respectively.,
W,W0632,Variables checker,unbalanced-tuple-unpacking (W0632),"Possible unbalanced tuple unpacking with sequence%s: left side has %d label(s), right side has %d value(s) Used when there is an unbalanced tuple unpacking in assignment",
W,W0641,Variables checker,possibly-unused-variable (W0641),"Possibly unused variable %r Used when a variable is defined but might not be used. The possibility comes from the fact that locals() might be used, which could consume or not the said variable",
W,W0622,Variables checker,redefined-builtin (W0622),Redefining built-in %r Used when a variable or function override a built-in.,
W,W0623,Variables checker,redefine-in-handler (W0623),Redefining name %r from %s in exception handler Used when an exception handler assigns the exception to an existing name,
W,W0621,Variables checker,redefined-outer-name (W0621),Redefining name %r from outer scope (line %s) Used when a variable's name hides a name defined in the outer scope.,
W,W0611,Variables checker,unused-import (W0611),Unused %s Used when an imported module or variable is not used.,
W,W0613,Variables checker,unused-argument (W0613),Unused argument %r Used when a function or method argument is not used.,
W,W0614,Variables checker,unused-wildcard-import (W0614),Unused import %s from wildcard import Used when an imported module or variable is not used from a 'from X import *' style import.,
W,W0612,Variables checker,unused-variable (W0612),Unused variable %r Used when a variable is defined but not used.,
W,W0602,Variables checker,global-variable-not-assigned (W0602),"Using global for %r but no assignment is done Used when a variable is defined through the ""global"" statement but no assignment to this variable is done.",
W,W0631,Variables checker,undefined-loop-variable (W0631),Using possibly undefined loop variable %r Used when a loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.,
W,W0603,Variables checker,global-statement (W0603),"Using the global statement Used when you use the ""global"" statement to update a global variable. Pylint just try to discourage this usage. That doesn't mean you cannot use it !",
W,W0604,Variables checker,global-at-module-level (W0604),"Using the global statement at the module level Used when you use the ""global"" statement at the module level since it has no effect",
